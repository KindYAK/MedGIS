# Generated by Django 2.2.13 on 2022-04-11 16:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scraping', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Автор',
                'verbose_name_plural': 'Авторы',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Corpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Корпус',
                'verbose_name_plural': 'Корпусы',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('topic_modelling_names', models.TextField(blank=True, null=True, verbose_name='Названия тематических моделирований (через запятую без пробелов)')),
                ('corpuses', models.ManyToManyField(blank=True, to='massmedia.Corpus', verbose_name='Корпусы')),
            ],
            options={
                'verbose_name': 'Группа пользователей',
                'verbose_name_plural': 'Группы пользователей',
            },
        ),
        migrations.CreateModel(
            name='Viewer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='massmedia.UserGroup')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь (Viewer)',
                'verbose_name_plural': 'Пользователь (Viewer)',
            },
        ),
        migrations.CreateModel(
            name='TopicID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_modelling_name', models.CharField(max_length=100, verbose_name='Название ТМ')),
                ('topic_id', models.CharField(max_length=50, verbose_name='ID топика')),
            ],
            options={
                'verbose_name': 'ID Топика',
                'verbose_name_plural': 'ID топиков',
                'unique_together': {('topic_modelling_name', 'topic_id')},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('corpus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Corpus', verbose_name='Корпус')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('url', models.CharField(blank=True, max_length=150, null=True, verbose_name='URL')),
                ('is_for_content_loaders', models.BooleanField(default=False, verbose_name="Для 'Блогеров'")),
                ('corpus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Corpus', verbose_name='Корпус')),
            ],
            options={
                'verbose_name': 'Источник',
                'verbose_name_plural': 'Источники',
            },
        ),
        migrations.CreateModel(
            name='ScrapRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(choices=[(0, 'title'), (1, 'text'), (2, 'author'), (3, 'datetime'), (4, 'tags'), (5, 'categories'), (6, 'num_views'), (7, 'num_likes'), (8, 'num_comments'), (9, 'num_shares')], verbose_name='Тип поля')),
                ('selector', models.CharField(max_length=500, verbose_name='CSS селектор')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Source', verbose_name='Источник')),
            ],
            options={
                'verbose_name': 'Правило скрапинга',
                'verbose_name_plural': 'Правила скрапинга',
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='massmedia.UserGroup')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Эксперт',
                'verbose_name_plural': 'Эксперты',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_txt', models.CharField(blank=True, max_length=100, null=True, verbose_name='Автор')),
                ('title', models.CharField(max_length=500, verbose_name='Заголовок*')),
                ('text', models.TextField(verbose_name='Текст*')),
                ('html', models.TextField(blank=True, null=True, verbose_name='HTML')),
                ('links', models.TextField(blank=True, null=True, verbose_name='Перечень ссылок')),
                ('url', models.CharField(blank=True, max_length=1000, null=True, unique=True, verbose_name='URL')),
                ('type', models.SmallIntegerField(choices=[(0, 'News'), (1, 'Interview'), (2, 'Article'), (3, 'Blogs/Opinions')], default=0, verbose_name='Тип публикации (в основном для Тенгри)')),
                ('datetime', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата парсинга')),
                ('datetime_activity_parsed', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего парсинга активности')),
                ('datetime_activity_es_updated', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата последнего апдейта активности в ES')),
                ('num_views', models.IntegerField(blank=True, null=True, verbose_name='Количество просмотров')),
                ('num_shares', models.IntegerField(blank=True, null=True, verbose_name='Количество репостов/шейров')),
                ('num_comments', models.IntegerField(blank=True, null=True, verbose_name='Количество комментариев')),
                ('num_likes', models.IntegerField(blank=True, null=True, verbose_name='Количество лайков')),
                ('sentiment_loader', models.FloatField(blank=True, null=True, verbose_name='Тональность*')),
                ('class_label', models.CharField(blank=True, max_length=25, null=True, verbose_name='Класс (разметка)')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Оригинал был удалён/недоступен')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='massmedia.Author', verbose_name='Автор (FK)')),
                ('author_loader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор (кто загрузил)')),
                ('categories', models.ManyToManyField(blank=True, to='massmedia.Category', verbose_name='Категории')),
                ('social_network_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='scraping.SocialNetworkAccount', verbose_name='Аккаунт (соц сетей)')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Source', verbose_name='Источник*')),
                ('tags', models.ManyToManyField(blank=True, to='massmedia.Tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
        migrations.CreateModel(
            name='ContentLoader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supervisor', models.BooleanField(default=False, verbose_name='Супервайзер')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='massmedia.UserGroup')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Загрузчик контента',
                'verbose_name_plural': 'Загрузчики контента',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('datetime', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата парсинга')),
                ('unique_hash', models.CharField(blank=True, max_length=32, null=True, unique=True, verbose_name='Уникальность document, datetime, text')),
                ('comment_id', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Идентификатор комментария')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Document', verbose_name='Документ')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='massmedia.Comment', verbose_name='Ответ на...')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
            },
        ),
        migrations.AddField(
            model_name='category',
            name='corpus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Corpus', verbose_name='Корпус'),
        ),
        migrations.AddField(
            model_name='author',
            name='corpus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='massmedia.Corpus', verbose_name='Корпус'),
        ),
        migrations.CreateModel(
            name='TopicGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название группы')),
                ('topic_modelling_name', models.CharField(max_length=100, verbose_name='Название ТМ')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичная группа')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('topics', models.ManyToManyField(to='massmedia.TopicID')),
            ],
            options={
                'verbose_name': 'Группа топиков',
                'verbose_name_plural': 'Группы топиков',
                'unique_together': {('name', 'owner', 'topic_modelling_name')},
            },
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['corpus'], name='massmedia_t_corpus__e22cc1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together={('corpus', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='source',
            unique_together={('corpus', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='scraprules',
            unique_together={('source', 'type')},
        ),
        migrations.AlterUniqueTogether(
            name='document',
            unique_together={('source', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together={('document', 'comment_id')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['corpus'], name='massmedia_c_corpus__45343e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('corpus', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='author',
            unique_together={('corpus', 'name')},
        ),
    ]
