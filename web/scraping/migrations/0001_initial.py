# Generated by Django 2.2.13 on 2021-11-26 00:52

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InstagramLoginPass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.CharField(max_length=1000, verbose_name='Логин аккаунта')),
                ('password', models.CharField(max_length=1000, verbose_name='Пароль аккаунта')),
                ('csrftoken', models.CharField(blank=True, default='VQZCf2glmiox3V2eBY5GYYVe0Ccaahso', max_length=1000, null=True, verbose_name='CSRF токен')),
                ('ds_user_id', models.BigIntegerField(blank=True, default='27655705617', null=True, verbose_name='UserID')),
                ('rur', models.CharField(blank=True, default='ATN', max_length=1000, null=True, verbose_name='Некая META')),
                ('sessionid', models.CharField(blank=True, default='27655705617%3AhtsX9fZJbhBash%3A17', max_length=1000, null=True, verbose_name='ID Сессии')),
                ('mid', models.CharField(blank=True, default='X3MtfQAEAAEMDbQ5Qaq55lCDlKmn', max_length=1000, null=True, verbose_name='Некое ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetime_modified', models.DateTimeField(auto_now=True, verbose_name='Дата последнего изменнеия')),
            ],
            options={
                'verbose_name': 'Instagram - доступ',
                'verbose_name_plural': 'Instagram - доступ',
            },
        ),
        migrations.CreateModel(
            name='TelegramAuthKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('api_id', models.PositiveIntegerField(unique=True, verbose_name='API ID (my.telegram.org)')),
                ('api_hash', models.CharField(max_length=64, unique=True, verbose_name='API Key (my.telegram.org)')),
                ('string_session', models.CharField(blank=True, max_length=1000, null=True, verbose_name='String Session (generated)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetime_modified', models.DateTimeField(auto_now=True, verbose_name='Дата последнего изменнеия')),
            ],
            options={
                'verbose_name': 'Telegram - ключ',
                'verbose_name_plural': 'Telegram - ключи',
            },
        ),
        migrations.CreateModel(
            name='VKLoginPass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_id', models.CharField(max_length=100, verbose_name='APP ID приложения')),
                ('login', models.CharField(max_length=100, verbose_name='Логин аккаунта')),
                ('password', models.CharField(max_length=100, verbose_name='Пароль аккаунта')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('news_feed_limit_used', models.PositiveSmallIntegerField(default=0, verbose_name='News Feed запросов использовано')),
                ('wall_get_limit_used', models.PositiveSmallIntegerField(default=0, verbose_name='Wall Get запросов использовано')),
                ('datetime_news_feed_limit_reached', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда достигнут лимит по News Feed')),
                ('datetime_wall_get_limit_reached', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда достигнут лимит по Wall Get')),
                ('datetime_news_feed_updated', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда обновлено количество запросов по News Feed')),
                ('datetime_wall_get_updated', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда обновлено количество запросов по Wall Get')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetime_modified', models.DateTimeField(auto_now=True, verbose_name='Дата последнего изменнеия')),
            ],
            options={
                'verbose_name': 'VK - доступ',
                'verbose_name_plural': 'VK - доступ',
            },
        ),
        migrations.CreateModel(
            name='YouTubeAuthToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='TOKEN ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetime_modified', models.DateTimeField(auto_now=True, verbose_name='Дата последнего изменнеия')),
                ('videos_limit_used', models.PositiveSmallIntegerField(default=0, verbose_name='Get video запросов использовано')),
                ('datetime_videos_limit_reached', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда достигнут лимит по get video')),
                ('datetime_videos_updated', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата, когда обновлено количество запросов по get video')),
            ],
            options={
                'verbose_name': 'YouTube - доступ',
                'verbose_name_plural': 'YouTube - доступ',
            },
        ),
        migrations.CreateModel(
            name='SocialNetworkAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('nickname', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Никнэйм аккаунта')),
                ('social_network', models.PositiveSmallIntegerField(choices=[(0, 'Facebook'), (1, 'VK'), (2, 'Twitter'), (3, 'Instagram'), (4, 'Telegram'), (5, 'YouTube')], verbose_name='Соц. сеть')),
                ('url', models.CharField(max_length=1000, verbose_name='URL аккаунта (ссылка)')),
                ('account_id', models.CharField(max_length=1000, verbose_name='ID аккаунта')),
                ('priority_rate', models.FloatField(default=50, verbose_name='Приоритет парсинга (от 0 до 100')),
                ('is_active', models.BooleanField(default=True, verbose_name='Парсинг активирован')),
                ('is_private', models.BooleanField(default=False, verbose_name='Конфеденциальность аккаунта')),
                ('is_valid', models.PositiveSmallIntegerField(choices=[(0, 'Непроверенный'), (1, 'Верифицированный'), (2, 'Неверифицированный')], default=1, verbose_name='Состояние аккаунта')),
                ('num_followers', models.BigIntegerField(blank=True, default=None, null=True, verbose_name='Количество подписчиков')),
                ('num_follows', models.BigIntegerField(blank=True, default=None, null=True, verbose_name='Количество подписок')),
                ('datetime_last_parsed', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего успешного парсинга')),
                ('keywords', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Ключевые слова канала')),
                ('description', models.CharField(blank=True, default=None, max_length=1500, null=True, verbose_name='Описание канала')),
                ('topic_ids', models.CharField(blank=True, default=None, max_length=1500, null=True, verbose_name='Темы, относящиеся к каналу, разделенные знаком "|"')),
                ('view_count', models.BigIntegerField(blank=True, default=None, null=True, verbose_name='Количество просмотров профиля/канала')),
                ('posts_count', models.BigIntegerField(blank=True, default=None, null=True, verbose_name='Количество постов/видео')),
            ],
            options={
                'verbose_name': 'Аккаунт соц. сети',
                'verbose_name_plural': 'Аккаунты соц. сетей',
                'unique_together': {('account_id', 'social_network'), ('url', 'social_network')},
            },
        ),
        migrations.CreateModel(
            name='MonitoringQuery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('social_network', models.PositiveSmallIntegerField(choices=[(0, 'Facebook'), (1, 'VK'), (2, 'Twitter'), (3, 'Instagram'), (4, 'Telegram'), (5, 'YouTube')], verbose_name='Соц. сеть')),
                ('query', models.CharField(max_length=1000, verbose_name='Запрос')),
                ('priority_rate', models.FloatField(default=50, verbose_name='Приоритет парсинга (от 0 до 100')),
                ('max_requests_per_session', models.PositiveSmallIntegerField(default=100, verbose_name='Количество запросов за сессию')),
                ('is_active', models.BooleanField(default=True, verbose_name='Парсинг активирован')),
                ('datetime_last_parsed', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего успешного парсинга')),
            ],
            options={
                'verbose_name': 'Запрос для мониторинга',
                'verbose_name_plural': 'Запрос для мониторинга',
                'unique_together': {('query', 'social_network')},
            },
        ),
    ]
